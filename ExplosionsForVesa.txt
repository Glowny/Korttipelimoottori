MouseExplosion.h

#pragma once
#include "SFML\Graphics.hpp"
class MouseExplosion 
{
public:
	MouseExplosion(sf::Vector2f pos,sf::Color color1,sf::Color color2);
	bool update();
	void checkWindowCollision(sf::RenderWindow &window);
	~MouseExplosion(void);
	void setNewSpeed(sf::Vector2f speed,int index){_speeds[index] = speed;}
	int getParticleAmount(){return _particles.getVertexCount();}
	void draw(sf::RenderWindow &window);

private:
	sf::Clock _timer2;
	sf::Clock _timer;
	sf::VertexArray _particles;
	std::vector<sf::Vector2f>_speeds;
	sf::Clock _timer3;
	int trigger;
};

MouseExplosion.cpp

#include "MouseExplosion.h"


MouseExplosion::MouseExplosion(sf::Vector2f pos,sf::Color color1,sf::Color color2)
{
	int particlecount = 100;

	sf::Vector2f randpos;
	//std::srand(unsigned(std::time(NULL)));

	for(int i = 0; i < particlecount;i++)
	 {
		 int x = std::rand()%21-10;
		 int y = std::rand()%21-10;

		
		 int x2 = std::rand()%11;
		 int y2 = std::rand()%11;
		 x2*=0.2f;
		 y2*=0.2;

		 randpos.x = x;
		 randpos.y = y;
		 x*=x2;
		 y*=y2;

		 _speeds.push_back(sf::Vector2f(x,y));
		 _speeds.push_back(sf::Vector2f(y,x));
		 
		 

		 randpos+=pos;

		_particles.append(sf::Vertex(randpos,color1));
		_particles.append(sf::Vertex(randpos,color2));

	}
	
	_particles.setPrimitiveType(sf::PrimitiveType::Quads);

}

MouseExplosion::~MouseExplosion(void)
{

}

void MouseExplosion::draw(sf::RenderWindow &window)
{
	window.draw(_particles);
}

void MouseExplosion::checkWindowCollision(sf::RenderWindow &window)
{
	for(int i = 0; i < _particles.getVertexCount();i++)
		if(_particles[i].position.x <0)
			_speeds[i].x*=-1;
		else if(_particles[i].position.x>window.getSize().x)
			_speeds[i].x*=-1;
		else if(_particles[i].position.y<0)
			_speeds[i].y*=-1;
		else if(_particles[i].position.y>window.getSize().y)
			_speeds[i].y*=-1;
			
}

bool MouseExplosion::update()
{
	if(_timer.getElapsedTime().asSeconds()>0.01f)
	{
		for(int i = 0; i < _particles.getVertexCount();i++)
		{
			//_particles[i].color.b+=1;
			//_particles[i].color.g-=1;
		float lel = 0.9f;
		if(_particles[i].color.a>5)
		_speeds[i]*=lel;
		_particles[i].position+=sf::Vector2f(_speeds[i].x,_speeds[i].y);
		}
	_timer.restart();
	}
	if(_timer2.getElapsedTime().asSeconds()>0.02f)
		{
			for(int i = 0;i < _particles.getVertexCount();i++)
			{
				_particles[i].color.a-=1;
				if(_particles[i].color.a==16)
					_speeds[i]*=-1.f;
			}
			_timer2.restart();

		}
	
	if(_particles[_particles.getVertexCount()-1].color.a == 0)
		{
			return false;
		}
	else
		return true;

}

Vesan_UI_jutut.h

#include "MouseExplosion.h"

private:
std::vector<MouseExplosion>_explosions;

Vesan_UI_jutut.cpp

for(int i = 0; i < _explosions.size();)
{
	if(_explosions[i].update())
		i++;
	else
		_explosions.erase(_explosions.begin()+i);
}



if(hiiri on painettuna ja kortti selectattuna)
{
  if(_timer.getElapsedTime().asSeconds()>0.009)
  	{	
  	  _explosions.push_back(MouseExplosion(sf::Vector2f(sf::Mouse::getPosition(_window)),sf::Color(255,255,255,20),sf::Color(255,255,255,20)));
  		_timer.restart();
  	}
}

draw()
{
	for(int i = 0; i < _explosions.size();i++)
	{
		_explosions[i].draw(_window);
	}

}


